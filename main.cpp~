#include <iostream>                          //cout, cin
#include <string>							 //string class 						
#include <fstream>							 //flie handling
#include <vector>							 //vector class
#include <algorithm>                        //easy-to-use algorithms
#include <utility>                           //pair template
using namespace std;

enum Type {Input, Output, Mix};

class Node{
private:
  string name;
  Type type;
  vector<pair<Node*, int> > inputs;
  vector<pair<Node*, int> > outputs;
public:
  Node(string Name, Type optype){                                                                        //Constructor for the 
    name = Name;                                                                                       //first pass
    type = optype;
  }
  Node(string Name, Type optype, vector<pair<Node*, int> >* iputs, vector<pair<Node*, int> >* oputs){   //Constructor for the 
  	name = Name;																					   //second pass
  	type = optype;
  	inputs = *iputs;
  	outputs = *oputs;
  }
};

class AppGraph{
private:
	vector<Node*> inputs;
	vector<Node*> outputs;
	vector<Node*> internals;
public:
	vector<pair<Node*, int> > GetInputs(Node*);
	vector<pair<Node*, int> > GetOutputs(Node*);
	void CreateNode(Node*);
	void CreateEdge(Node*, Node*);
};	
int main(){
	ofstream inputfile;
	inputfile.open("a2.txt");
	inputfile << "This is a test file" << endl;
	if(inputfile.is_open){

	}
	else{
		cout << "The file is not open"<< endl;
	}
	inputfile.close();
	return 0;
}










  
  